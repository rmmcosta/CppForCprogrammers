agenda:
 - c++ functions and generics
 - graph algorithms
    - minimum spanning tree algorithm
    - dijkstra shortest path algorithm
 - default parameters and variable argument lists
 - const parameters
    - this way we ensure that nothing is changed inside the function
    regarding those parameters
 - multiple types in generics
 - operator overloading

 graph algorithms are foundational for computer science
    - here we will see how to represent a graph as a data type, a data structure
    - there are directed edges and undirected edges
    - directed graphs, undirected graphs, weighted graphs
    - complete graph level 4 -> k4
        - the degree of this graph is 4-1 = 3
    - the bridges problem
        - Euler theory
    - there are 2 possible data structures to represent graphs:
        - connectivity matrix (also distances)
            - dense graphs
        - edge list representation
            - sparse graphs (the majority of problems)
        - there are advantages and disadvantages:
            - the choice depends on:
                - how much data do you want to store
                - how efficient do you need the algorithm to be

- Dijkstra shortest path:
    - undirected graphs with weightings (with cost)
    - find the shortest path between start and destination:
        - s and d
    - the critical steps are to maintain:
        - 2 sets:
            - close nodes
                - nodes that have known shortest distances 
                    - for example the node itself (a - a)
            - open nodes
                - what is reachable
        - the iterative steps are two always peak the open node with
        the least cost
    - 3 possibilities:
        - open set  
        - close set (and it's done)
        - opportunity to update the path
    - you must have a way to tell what are the nodes of the path

creating types:
    - oop
        - extend the native types
    - type matters
        - also for operators

natural way of building widgets:
    - in C we can use struct
        - but can add to them only data members
        - to access the members of a struct when the struct
        is passed by reference (to a pointer),
        you have to use the -> 
        void sumToPoint(Point *p1, Point p2) {
            p1->x += p2.x;
            p1->y += p2.y;
        }
    - in C++ the structs can also have methods
        - but the scope of those methods is the 
        struct itself
    - C++ also has classes
        - classes have 3 types of access:
            public, private and protected
        class Xpto {
            private:
                int x;
            public:
                int getX() {
                    return x;
                }
        }
    - 90% rules in programming:
        - if you learn a few ideas
        - they are applicable to 90% of the use cases
        - the other 10% you can learn them as you go
        - so, learn the basics
    - it's a common use case to override the << operator
    so the object will work with cout;

    - pass by reference (Xpto &xpto) it's always better in terms 
    of performance
    - and if the object is not supposed to be mutated it's a good
    practice to add the const keyword
    (const Xpto &xpto)
    

