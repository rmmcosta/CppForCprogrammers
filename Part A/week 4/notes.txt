- Minimum spanning tree:
    - assume a graph is connected with arbitrary cost Cij
    - Find a spanning tree of least cost
    - A spanning tree is a set of edges within the graph
    that connects all the nodes and where there is no cycle
    - a tree with n nodes -> the spanning tree has n-1 edges
- for the assignment think of edges with colors:
    - red, blue and green
    - find MST with edges of a specific color or pair of colors

- with c11++ we now have enum class types
    - they have some advantages when compared with regular enum types
    - they are considered to be strongly typed enumerators
    - the regular enum types have problems for instance in the following situation:
        - enum Color {RED, BLUE, GREEN};
        - enum Traffic {RED, BLUE, GREEN};
    - enum class types don't have these problems:
        - enum class Color {RED, BLUE, GREEN};
        - enum class Traffic {RED, BLUE, GREEN};
            Color::RED;
- Jarnik-Prim MST:
    - starts with a single vertex and repeatedly joins the Minimum
    weight edge that joins the tree to a non-tree vertex
    - at each step, the tree is a mst
    - start at node 0, look for the nearest node
    - peek the nearest node until
        - all nodes in the graph
        - or no more nodes
    - attention that this is not a path, it's a tree
    - so we can go back to a previous node to jump to a new one
    - so we have a vector of vertexes that starts with 0
    and we always iterate over this vector to see from the vertexes that
    are there what is the nearest node (don't count with the 
    ones that are already here in the vertex vector)

- side note:
    - iterator for vectors
    for(vector<int>::iterator it = myvector.begin();it!=myvector.end();it++)

- kruskal algorithm

- Overload and function selection
	- operator overloading
	- friend functions
	- user defined types should be indistinguishable from native types
		- operator overloading and conversion allows us to implement this principle
	- in a constructor by using the keyword explicit we can turn off implicit conversion
		- for instance:
		class Xpto
		{
			public:
				Xpto(double d):x(d),y(0.0){}
	- a friend function has access almost as if it was a member function
	but is not a member function
		- has access to the private stuff	
	- friend overloading vs member function overloading
		- friend function overloads operator by all the args being passed in the args list
		- member function overloads operators by the first argument being the class argument

- standard template library - STL
	- vectors
	- the threading library
	- stl is like a three legged stool (chair)
		- stl sits on containers, algorithms and iterators
		- containers:
			- vectors, lists, maps, etc.
		- iterators:
			- forward, backward, random access
			- we also have stream iterators
		- algorithms:
			- sort, permute, etc.  
			- bubble sort, quick sort, etc.
	- iterator for vectors:
		for(vector<int>::iterator it = v.begin(); it!=v.end(); it++)
		{
			cout << "the value: " << *it << endl;
		}
	- v.begin() point to a value, but v.end() doesn't hold a value. v.end() is just a sentinel

- c++ 11:
	- auto -> infer type
		- types can be deduced from context
		- so for instance vector<int>::iterator it can be replaced by:
			for(auto it=v.begin(); it!=v.end(); it++)
	- range for statement
		- for(double d:data)
		- for(declaration:expression)
		- for(auto &element:data) 
		  {
			  element+=2;
		  }

- iterators categories (weakest to strongest):
	- input -> read (single pass)
	- output -> write (single pass)
	- forward -> read and write (multipass) 1 direction
	- bidirectional -> multipass with 2 directions
	- random access -> o(1) -> indexable container -> arrays and vectors

- in stl the design principle is to use the weakest iterator that
accomodates the most efficient algorithm
- quicksort requires random access. 
As a consequence it can't be used in a non-random access container
such as list

- to do sums we can use the accumulate of the numeric library
	accumulate(start, end, initialValue)

