classes and oop:
    - constructors and destructors
    - declare, allocate, assign
    - constructors:
        - default constructors
        - copy constructors
        - argument constructors
        - conversion constructors
        - initialize list syntax
            - point():x(0.0),y(1.1){}
            - point(double x, double y):x(x),y(y){}
            - point(double x=0.0, double y=0.0):x(x),y(y){}
        - assignment is different than initialization
            - initialize a const is possible
            - assign a value to a const is not
    - new -> allocator -> in C malloc()
    - delete -> deAllocator -> in C free()
        - here we are working with the heap
        - heap is dynamically allocated memory
            - stack is static allocated memory
            - stack is faster than heap
            - You can use the stack if you know exactly how much data you need to 
            allocate before compile time and it is not too big. 
            - You can use heap if you don't know exactly how much data you will need 
            at runtime or if you need to allocate a lot of data.
            - int b[10]; -> stack
            - int *b = new int[10]; -> heap
        - and unlike java is not automatically garbage collected
    - good programmers always free memory if that memory is not needed
    anymore
    - destructors:
        ~Point() {...}
Exercise:
    - implement a single linked list:
        constructor
        destructor
        head
        prepend method
    - 0 is the null pointer

Exercise:
    - have a program to draw a graph

- we can create a multidimensional array with double pointer:
    bool **graph;
    graph = new bool *[size];
    for (int i = 0; i < size; i++)
    {
        graph[i] = new bool[size];
    }

- complex aggregates:
    - for example lists and list elements
        - the elements are stored in the heap memory
        - the class element will have 
            - the value that we want to store (an int or char, or any other type)
            - the pointer to the next list element
        - the last element will have a null pointer as next
            - in c++11 use nullptr;
            - in other versions use 0;
        - in a list most of the times you want to have 
        an head list element pointer and a cursor list element pointer
            - the head is the start list element
            - the cursor is the current list element where you are in the list 
        - list class methods:
            - append
                - the head stay fixed in the beginning and the 
                cursor is the one that advances
                - the new element is always the last element
                - don't forget to check if the head is empty
                    - the first element to be appended
                void append(data) {
                    ListElement *element = new ListElement;
                    element->data = data;
                    element->next = nullptr;
                    cursor->next = element;
                    cursor = element;
                }
            - prepend
                - in the case of the prepend
                the head moves and the cursor stays fixed
                - the new element points to the old head
                - and the head points to the new element
            - advance
                cursor = cursor->next
            - getelement
                return cursor->data
            - print
    - remember to use the standard template library
        - lists have various types of constructors there:
            - default ():head(0),cursor(0){}
            - transfer constructor (const int *arr, int size)
            - copy constructor (const list& lst)
            - move constructor (const list& lst)
        - deep copy vs referential (or shallow) copy:
            - questions about utilization, cost and modification
            - deep copy:
                - use the copy constructor
    - good citizenship
        - means that everything we create of the heap
        we must deAllocate
        - we can use valgrind to test our memory leaks
            valgrind ./myListMain --leak-check=full
