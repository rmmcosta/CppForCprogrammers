- hex, alpha-beta and monte carlo evaluation
- assertions and exception handling

- monte carlo evaluation 
    - use probabilistic simulation to understand a phenomena

- when you have a lot of available moves you can't run them all:
    - classic lookahead game - AI:
        - evaluate the current position
        - select plausible moves
            - use a certain criteria:
                - captures
                - checks
                - advance a pawn
        - look at responses 
            - until reaching leaf nodes 
                - positions capable of static evaluation
                - sometimes we will need to make a guess (probabilistic)
        - apply alpha-beta to pick move

- monte carlo is a simulation where we make heavy use of the ability to 
use pseudo random number generators to provide large number of trials
    - can be used to predict real world odds for events and games

- when using monte carlo for the game of hex we will run as many trials as we can
choosing the next move at random
    - in the end we will know how many times a certain player was able to win
    when starting by a certain move
    - with the random generator rand() we can obtain a probability by doing the following:
        - (1.0*rand())/RAND_MAX
    - the position's value is reflected in wins/losses when played out
    by taking turns making random moves
    - in case of hex to determine who won we must aim for efficiency
        - for that we can use a specialized dijkstra algorithm
        - or the union find algorithm:
            - https://algs4.cs.princeton.edu/15uf/
    - because we want to do huge amounts of trials in an efficient way
    - stl-shuffle method:
        - http://www.cplusplus.com/reference/algorithm/shuffle/
        - shuffle all the nodes
        - have a data structure keeping track of the nodes of the hex board
            - shuffle them and fill the first half with black stones
            - and the second half with white stones
            - random placement accomplished 
    - only evaluate who won in the end
        - do all the moves even if someone already won
        - doing moves is cheap, evaluate who won is not
    - special dijkstra for hex win:
        - if the board is full and there is no path from N to S for player 1 then player 2
        has to have won.

- Requirements:
    - expect move selection to take on the order of
    2 minutes or less
    - try to get between 100-1000 MC simulations for each leagal move
    - you can use multi threading to run independent monte carlo simulations
    as long as they use different pseudo random generator seeds

Hex rules:
    - don't forget about pie rule
        - where the 2nd player can choose to steal the 1st player move
    - if the 1st player plays perfectly he will always win
    - so, if the 2nd player steals the 1st player first move he will have the guarantee to 
    win if he plays perfectly

assertions and exceptions:
    proofs of correctness
        test preconditions
        code to be certified
        test postconditions
        -if pre and post conditions are true than the code is correct

asserts are runtime test
    - is those tests fail the program will abort
        - some overhead is added to our programs with this
        - #include <cassert>
            void assert(int expression);
            -> this is essentially a macro
            and can be disabled with #define NDEBUG
    - in c++11 Static_asserts were added which allows the compiler
    to statically test conditions (compile time asserts)
        - a proof checker embeded in the compiler 
        - no overhead
    
use exceptions wisely 
    - don't use it for things that are considered normal flows
    - don't use them to control flows
    - use it to recover from errors
        use ellipsis to catch everything
        try
        {

        }
        catch(...)
        {

        }
    - standard exceptions present in the stl

Static assert:
    - static_assert(bool_constexpr, string);

move semantics:
    - lvalues and rvalues;
        - most of the times in an assignment on the left we have the lvalue
        and on the right the rvalue;
        - you can have lvalue references from lvalues but not lvalue references from rvalues
        - string1 = "xpot", string2 = "yzp"
        - string3 = string1 + string2;
        string1+string2 is an rvalue because it is a temporary string which we can't assign to it
        - lvalue reference doesn't accept constants (rvalues)
        for instance
        void print(string& s)
        {}
        print(string1+string2); -> will throw an error
        but if we change to void print(const string& s){}
            - this will work for both lvalues and rvalues
        if we change to void print(string&& s){}
            - this will work with rvalues

