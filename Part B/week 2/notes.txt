- The Hex game
    - 7x7
    - blacks, whites and empties
    - one player plays west to east
    - the other player plays north to south
    - the 2nd player can choose to proceed with the first player move
- srand
    - the int rand returns a random number between 0 and max int (RAND_MAX)
    - int rand(void); //cstdlib
    - with srand(time(NULL))
        - with srand we can pass a seed

- inheritance:
    - is a reuse mechanism
    - in c++ uses pure polymorphism
        - uses a virtual function mechanism

- The OOP design methodology:
    1- Decide on a appropriate set of types (classes)
    2- Design in their relatedness(the relationships between classes)
    3- Use inheritance to share code among classes

- public inheritance (90% of the use cases)
    - protected access -> gives access to "family" classes
    class Dog:public Animal
    {
        //the code goes here
    };
    - constructors need to be specified per class
        - the derived class needs to have its own constructor
- c++ allows single and multiple inheritance
- virtual member functions
    - it's what supports pure polymorphism
        - dynamic at runtime it will select the appropriate function trough a pointer
        to the base class
    - defined in the base class
    - redefined in the derived class
        - overwritten

- use keyword final to prevent further inheritance
    class point3d final:public point {...};
    - this will also make the compiler more efficient

- the const keyword in the end of a method means
that the method can't change the instance for whom 
the method was called

- inheritance comes in 3 flavors:
    - public (used in 90% of the use cases)
        - subtype relation
    - private
    - and protected

- virtual function 
    - if you don't use the keyword virtual in a method of
    a base class, when you have a pointer or a reference to that
    base class but the original instance is a derived class 
    the invoked method will be the one associated with the base class
    and not the one associated with the derived class

- overloaded function/method
    - selected in compile time based on signature
    - can have distinct return types
- overriden function/method
    - selected in runtime
    - the signature is the same in the derived classes

virtual function when used with pointer allows to call the correct method
    even if an upcast occurred

constructors can't be virtual
    can be emulated by using the factory pattern
but destructors can be virtual